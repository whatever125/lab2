1
ВеВеб-
граммропрограммированиеирован
орАвтор рскурса — опЦопа . Е.А..
2023/24 . уч. годод

2
 . 1. едеВведениеие

3
ирМир ра-провеб-программированиямирония
● Большая часть современных приложений 
взаимодействует с внешним миром через сеть 
Интернет.
● Даже локальные приложения часто пишутся по 
«канонам» веб-программирования.
● Практически все современные веб-сайты – 
полноценные информационные системы.

4
кттеАрАрхитектура -пининтернет-приложенийилий
● Много подходов и их реализаций — как на 
клиентской, так и на серверной стороне.
● Целесообразность подхода определяется 
сложностью разрабатываемого приложения и его 
областью использования.
● Независимо от выбранного подхода, «снизу» всё 
равно используются одни и те же стандарты и 
протоколы. 

5
оескерСферическое пррнентинтернет-приложениелоен
в акувакуумеум
Клиент Сервер
request
Браузер HTTP httpd HTML
response

6
анПлПлан урскурса ((1)1)
Раздел Технологии
1 Введение
2 Общие стандарты и протоколы сети 
Интернет
2.1 Клиент-серверное взаимодействие HTTP
2.2 Разметка страниц HTML
2.3 Стилизация страниц CSS, SCSS
2.4 Динамические сценарии на стороне клиента JavaScript
2.5 Асинхронное клиент-серверное DHTML, Long Polling, 
взаимодействие WebSocket

7
анПлПлан урскурса ((2)2)
Раздел Технологии
3 «Классические» интернет-приложения
3.1 Серверные сценарии CGI, FastCGI, Servlets
3.2 Шаблоны проектирования и архитектурные 
шаблоны
3.3 Шаблонизация страниц JSP, FreeMarker, 
ThymeLeaf
4 Rich Internet Applications Java Server Faces
5 Архитектура корпоративных приложений Java / Jakarta EE, Spring, 
Spring Web MVC
6 REST и SPA-фреймворки React, Angular, Vue

8
2. ОбОбщие тандартыстандарты и 
олтопропротоколы сети Интернеттернет

9
арандСтандарты и лыропротоколы сетсети 
ИнтИнтернетерн
● «Основа основ»:
● Hypertext Transfer Protocol (HTTP) — предназначен 
для передачи гипертекста между клиентом и 
сервером.
● Hypertext Markup Language (HTML) — язык 
разметки гипертекста.
● «Дополнения» к HTML:
● Cascade StyleSheets (CSS) – язык описания 
внешнего вида HTML-документа. 
● JavaScript – язык для написания динамических 
сценариев, выполняемых на стороне клиента.

10
1.2.2.1. -снтлиеКлиент-серверноевеное
заимодвзаимодействие.йствие.
олокотПрПротокол HTTP..

11
ПроПротокол HTTP
● Протокол прикладного уровня
● Основа — технология «клиент-сервер»
● Может быть использован в качестве «транспорта» 
для других протоколов прикладного уровня
● Основной объект манипуляции — ресурс, на который 
указывает URI
● Обмен сообщениями идёт по схеме «запрос-ответ»
● Stateless-протокол (состояние не сохраняется). Для 
реализации сессий используются cookies.

12
I,URI, URURL и URN
● URI (Uniform Resource Identifier) — уникальный 
идентификатор ресурса — символьная строка, 
позволяющая идентифицировать ресурс.
● URL (Uniform Resource Locator) — URI, 
позволяющий определить местонахождение 
ресурса.
● URN (Uniform Resource Name) — URI, 
содержащий единообразное имя ресурса (не 
указывает на его местонахождение).

13
I,URI, URL и URURN допро((продолжение)ние
● URI:
<схема>:<идентификатор-в-зависимости-от-схемы>
● URL:
https://se.ifmo.ru/courses/web
../task.shtml
mailto:Joe.Bloggs@somedomain.com
● URN:
urn:isbn:5170224575
urn:sha1:YNCKHTQCWBTRNJIV4WNAE52SJUQCZO5C

14
RESTEST
● Representational State Transfer (передача состояния 
представления) – подход к архитектуре сетевых протоколов, 
обеспечивающих доступ к информационным ресурсам.
● Основные концепции:
● Данные должны передаваться в виде небольшого числа 
стандартных форматов (HTML, XML, JSON).
● Сетевой протокол должен поддерживать кеширование, 
не должен зависеть от сетевого слоя, не должен 
сохранять информацию о состоянии между парами 
«запрос-ответ».
● Антипод REST – подход, основанный на вызове удаленных 
процедур (Remote Procedure Call – RPC).

15
уктрСтруктура зазапроса HTTP
● Стартовая строка:
Метод URI HTTP/Версия
GET /spip.html HTTP/1.1
● Заголовки:
Host: se.ifmo.ru
User-Agent: Mozilla/5.0 (X11; U; Linux i686; ru; rv:1.9b5) 
Gecko/2008050509 Firefox/3.6
Accept: text/html
Connection: close
● Тело сообщения

16
уктрСтруктура татвответа HTHTTP
● Стартовая строка:
HTTP/Версия КодСостояния Пояснение
HTTP/1.1 200 Ok
● Заголовки:
Server: Apache/2.2.11 (Win32) PHP/5.3.0
Last-Modified: Sat, 16 Jan 2010 21:16:42 GMT
Content-Type: text/plain; charset=windows-1251
Content-Language: ru
● Тело сообщения

17
дытоМетоды HTHTTP
● OPTIONS — определение возможностей сервера.
● GET — запрос содержимого ресурса.
● HEAD — аналог GET, но в ответе отсутствует тело.
● POST — передача данных ресурсу.
● PUT — загрузка содержимого запроса на 
указанный URI.

18
дыКоды состоянияния
● Состоят из 3-х цифр.
● Первая цифра — класс состояния:
«1» — Informational — информационный;
«2» — Success — успешно;
«3» — Redirection — перенаправление;
«4» — Client error — ошибка клиента;
«5» — Server error — ошибка сервера.
● Примеры:
201 Webpage Created
403 Access allowed only for registered users
507 Insufficient Storage

19
ЗагЗаголовки HTHTTP
● Формат:
ключ:значение
● 4 группы:
● General Headers — могут включаться в любое 
сообщение клиента и сервера. Пример — Cache-
Control.
● Request Headers — используются только в запросах 
клиента. Пример — Referer.
● Response Headers — используются только в запросах 
сервера. Пример — Allow.
● Entity Headers — сопровождают любую сущность 
сообщения. Пример — Content-Language.

20
ПримеПримеры нийсообщений HTHTTP
● Запрос клиента:
GET /iaps/labs HTTP/1.1
Host: сs.ifmo.ru
User-Agent: Mozilla/5.0 (X11; U; Linux i686; ru; rv:1.9b5)
Gecko/2008050509 Firefox/3.6.14
Accept: text/html
Connection: close
● Ответ сервера:
HTTP/1.0 200 OK
Date: Wed, 02 Mar 2011 11:11:11 GMT
Server: Apache
X-Powered-By: PHP/5.2.4-2ubuntu5wm1
Last-Modified: Wed, 02 Mar 2011 11:11:11 GMT
Content-Language: ru
Content-Type: text/html; charset=utf-8
Content-Length: 1234
Connection: close
...HTML-код запрашиваемой страницы...

21
. .22.2. каазметРазметка 
. траницсстраниц. 
Язык HTML.ML.

22
ЧтЧто такое HTHTMLML
● Стандартный язык разметки документов в 
Интернете.
● Интерпретируется браузером и отображается в 
виде документа.
● Разработан в 1989-91 годах Тимом Бернерсом-Ли.
● Является частным случаем SGML (стандартного 
обобщённого языка разметки).
● Существует нотация XHTML, являющаяся 
частным случаем языка XML.

23
БрБраузерыузеры
● Браузер — программа, отображающая HTML-
документ в его отформатированном виде.
● Популярные браузеры:
● Google Chrome
● Mozilla Firefox
● M$ Internet Explorer / Edge
● Apple Safari
● Opera

24
уруктрСтруктура -доHTHTML-документаумент
● Документ состоит из элементов.
● Начало и конец элемента обозначаются тегами:
<b>текст</b>
● Теги могут быть пустыми:
<br>
● Теги могут иметь атрибуты:
<a href="http://www.example.com">Здесь элемент содержит 
атрибут href.</a>
● Элементы могут быть вложенными:
<b>
  Этот текст будет полужирным,
  <i>а этот - ещё и курсивным</i>
</b>

25
ктСтруктура кументTMHTML-документа 
ро((продолжение)лжение
● Документ должен начинаться со строки 
объявления версии HTML:
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" 
    "http://www.w3.org/TR/html4/strict.dtd">
● Начало и конец документа обозначаются тегами 
<html> и </html>.
● Внутри этих тегов должны находиться заголовок 
(<head>...</head>) и тело документа 
(<body>...</body>).

26
ПримеПример -доHTHTML-документаумнта
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
 "http://www.w3.org/TR/html4/strict.dtd">
<html>
 <head>
  <meta http-equiv="Content-Type" content="text/html;
   charset=utf-8">
  <title>Пример веб-страницы</title>
 </head>
 <body>
  <h1>Заголовок</h1>
  <!-- Комментарий -->
  <p>Первый абзац.</p>
  <p>Второй абзац.</p>
 </body>
</html>

27
имерПример ументHTML-документа 
ро((продолжение)лжение

28
-фHTHTML-формырмы
● Предназначены для обмена данными между 
пользователем и сервером.
● Документ может содержать любое число форм, но 
одновременно на сервер может быть отправлена 
только одна из них.
● Вложенные формы запрещены.
● Границы формы задаются тегами <form>...</form>.
● Метод HTTP задаётся атрибутом method тега <form>:
<form method="GET" action="URL">...</form>

29
ПримеПример HTHTML-формы-формы
<form method="POST" action="handler.php">
  <p><b>Как по вашему мнению расшифровывается 
аббревиатура &quot;ОС&quot;?</b></p>
  <p><input type="radio" name="answer" 
value="a1">Офицерский состав<Br>
  <input type="radio" name="answer" 
value="a2">Операционная система<br>
  <input type="radio" name="answer" 
value="a3">Большой полосатый мух</p>
  <p><input type="submit"></p>
</form>

30
римеПример мы-фоTMHTML-формы до((продолжение)ние

31
тнаОбъОбъектная делмомодель ментдодокумента DOM((DOM)
● DOM — это платформо-независимый интерфейс, 
позволяющий программам и скриптам получить 
доступ к содержимому HTML-документов.
● Стандартизирована W3C.
● Документ в DOM представляет собой дерево 
узлов.
● Узлы связаны между собой отношением 
«родитель-потомок».
● Используется для динамического изменения 
страниц HTML.

32
аябъектОбъектная елмомодель кудодокументаент
DOM((DOM, допродожение)ие

33
HTHTML5ML5
● Пятая версия спецификации языка 
HTML.
● Стандарт принят в 2014 г. (HTML4 – в 
1999 г.).
● Много новых синтаксических 
особенностей, в первую очередь – для 
более удобного управления 
мультимедийным содержимым 
страницы.

34
L5:HTHTML5: неизмеизменения в синтаксисеис
● Больше не базируется на SGML (хотя всё ещё 
обратно совместим с HTML4).
● Новая вводная строка <!DOCTYPE html>.
● Новые мультимедийные теги <audio> и 
<video>.
● Семантические замены для универсальных 
блочных (<div>) и строчных (<span>) элементов 
– <nav>, <footer> и т. д.
● Поддержка Web Forms 2.0 – новые поля ввода  
date/time, email, новые атрибуты и т. д.

35
L5:HTHTML5: ниянеизмеизменения в API

36
5:HTHTML5: примепример трстраницыаницы

37
HTHTML5: примепример фоформырмы

38
2.3. иялизацтиСтилизация 
. ицтранстраниц. 
овыснОсновы CSS.S.

39
Что такое CSSSS
● CSS — технология описания внешнего вида 
документа, написанного языком разметки.
● Используется для задания цветов, шрифтов и 
других аспектов представления документа.
● Основная цель — разделение содержимого 
документа и его представления.
● Позволяет представлять один и тот же документ 
в различных методах вывода (например, 
обычная версия и версия для печати).

40
чниктоИсточники CSSSS
● Авторские стили (информация стилей, предоставляемая 
автором страницы) в виде:
● Inline-стилей — стиль элемента указывается в его 
атрибуте style.
● Встроенных стилей — блоков CSS внутри самого HTML-
документа.
● Внешних таблиц стилей — отдельного файла .css.
● Пользовательские стили:
● Локальный CSS-файл, указанный пользователем в 
настройках браузера, переопределяющий авторские 
стили.
● Стиль браузера:
● Стандартный стиль, используемый браузером по 
умолчанию для представления элементов.

41
уктрСтруктура CSSSS
● Таблица стилей состоит из набора правил.
● Каждое правило состоит из набора селекторов и 
блока определений:
селектор, селектор {
  свойство: значение;
  свойство: значение;
  свойство: значение;
}
● Пример:
div, td {
  background-color: red;
}

42
тыитеПриоПриоритеты тистилей
● Если к одному элементу «подходит» сразу несколько 
стилей, применён будет наиболее приоритетный.
● Приоритеты рассчитываются таким образом (от 
большего к меньшему):
1. свойство задано при помощи !important;
2. стиль прописан напрямую в теге;
3. наличие идентификаторов (#id) в селекторе;
4. количество классов (.class) и псевдоклассов 
(:pseudoclass) в селекторе;
5. количество имён тегов в селекторе.
● Имеет значение относительный порядок расположения 
свойств — свойство, указанное позже, имеет приоритет.

43
ПримеПример CSSSS
p { p#paragraph1 {
  font-family: "Garamond", serif;  margin: 0;
} }
h2 { a:hover {
  font-size: 110 %;  text-decoration: none;
  color: red; }
  background: white; #news p {
}  color: blue;
.note { }
  color: red;
  background: yellow;
  font-weight: bold;
}

44
ПримеПример аницытрстраницы с CSSSS
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
 "http://www.w3.org/TR/html4/strict.dtd">
<html>
 <head>
  <meta http-equiv="Content-Type" content="text/html; 
charset=utf-8">
  <title>Заголовки</title>
  <style type="text/css"> 
   h1 { color: #a6780a; font-weight: normal; } 
   h2 { 
    color: olive; 
    border-bottom: 2px solid black; 
   }
  </style>
 </head>
 <body>  
  <h1>Заголовок 1</h1>
  <h2>Заголовок 2</h2>  
 </body>
</html>

45
SSLELESS & ssSass // SCSCSSSS
Языки стилей, позволяющие повысить уровень абстракции  CSS-
кода и упростить структуру таблиц стилей.
По сравнению с «обычным» CSS, имеются следующие особенности:
● Можно использовать переменные (константы и примеси).
● Можно использовать вложенные правила.
● Более мощные возможности по импорту, наследованию стилей.
● Поддержка математических операторов.
Браузеры могут не поддерживать LESS & Sass / SCSS-таблицы 
стилей — нужен специальный транслятор, который преобразует 
эти правила в «обычный» CSS.

46
SSLELESS & Sass // SSSCSCSS допро((продолжение)ние
● LESS — CSS-like синтаксис:
.box-1 {
  color: #BADA55;
  .set-bg-color(#BADA55);
}
● SASS — Ruby-like синтаксис:
.my-element
    color= !primary-color
    width= 100%
    overflow= hidden
● SCSS — диалект SASS с CSS-like синтаксисом:
.my-element {
    color: $primary-color;
    width: 100%;
    overflow: hidden;
}

47
нсКонстантынты
(SCSS)
h2 {
//-- Font size ------  font-size: $md-font-size-h2;
$md-font-size-h1: 24px;  line-height: $md-line-height-h2;
$md-font-size-h2: 20px;
$md-font-size-h3: 16px; }
$md-font-size-h4: 13px;
$md-font-size-h5: 12px; h3 {
$md-font-size-h6: 10px;  font-size: $md-font-size-h3;
  line-height: $md-line-height-h3;
//-- Line height ------ }
$md-line-height-h1: 32px;
$md-line-height-h2: 28px; h4 {
$md-line-height-h3: 24px;
$md-line-height-h4: 24px;  font-size: $md-font-size-h4;
$md-line-height-h5: 20px;  line-height: $md-line-height-h4;
$md-line-height-h6: 20px; }
//-- Font weight ------ h5 {
$md-font-weight-regular: 400;  font-size: $md-font-size-h5;
h1, h2, h3, h4, h5, h6 {  line-height: $md-line-height-h5;
  font-weight: $md-font-weight-regular; }
  margin: 0;
}
h6{
h1 {  font-size: $md-font-size-h6;
  font-size: $md-font-size-h1;  line-height: $md-line-height-h6;
  line-height: $md-line-height-h1; }
}

48
ПримеПримеси
Код на SCSS: «Обычный» CSS:
@mixin border-radius($radius,$border, .box {
$color) {   -webkit-border-radius: 10px;
  -webkit-border-radius: $radius;   -moz-border-radius: 10px;
     -moz-border-radius: $radius;   -ms-border-radius: 10px;
      -ms-border-radius: $radius;   border-radius: 10px;
          border-radius: $radius;   border: 1px solid red;
    border:$border solid $color }
}
.box {
  @include border-radius(10px,1px,red);
}

49
нныеВложенные тистили
Код на SCSS: Может быть преобразован 
в «обычный» CSS:
#header {
    background: #FFFFFF;    #header {
    .error {   background: #FFFFFF; 
        color: #FF0000; }
    }
    a { #header .error {
   color: #FF0000; 
        text-decoration: }
            none;
        &:hover { #header a {
   text-decoration: none; 
            text-decoration:
                underline; }
        } #header a:hover {
    }   text-decoration: 
} underline; 
}

50
мпоИмпорт тилстилей
// _reset.scss // base.scss
html, @import 'reset';
body,
ul, body {
ol {  font: 100% Helvetica, sans-serif;
  margin: 0;  background-color: #efefef;
  padding: 0; }
}

51
НаНаследованиедоание
.message { .error {
  border: 1px solid #ccc;  @extend .message;
  padding: 10px;  border-color: red;
  color: #333; }
}
.warning {
.success {  @extend .message;
  @extend .message;  border-color: yellow;
  border-color: green; }
}

52
атеМатематикамаик
.container { width: 100%; }
article[role="main"] {
  float: left;
  width: 600px / 960px * 100%;
}
aside[role="complementary"] {
  float: right;
  width: 300px / 960px * 100%;
}

53
цияилмпКомпиляция в CSSSS
Пример для Maven:
<!-- Sass compiler -->
<plugin>
    <groupId>org.jasig.maven</groupId>
    <artifactId>sass-maven-plugin</artifactId>
    <version>2.25</version>
    <executions>
        <execution>
            <phase>prepare-package</phase>
            <goals>
                <goal>update-stylesheets</goal>
            </goals>
        </execution>
    </executions>
    <configuration>
        <resources>
            <resource>
                <!-- Set source and destination dirs -->
                <source>
                    <directory>${project.basedir}/src/main/webapp/sass</directory>
                </source>
                
<destination>${project.basedir}/src/main/webapp/sass_compiled</destination>
            </resource>
        </resources>
    </configuration>
</plugin>

54
2.4. скченаДинамические 
риенасцсценарии на ростороне 
ликлиента.нт
ыкЯзык vaJaJavaScript.Script

55
ripaScJaJavaScript и иентсиеклиентские насценариирии
● JavaScript — объектно-ориентированный скриптовый 
язык программирования.
● Используется для придания интерактивности веб-
страницам.
● Основные архитектурные черты:
● динамическая типизация;
● слабая типизация;
● автоматическое управление памятью;
● прототипное программирование;
● функции как объекты первого класса.

56
тиноОсобенности инсинтаксисаис
● Все идентификаторы регистрозависимы.
● В названиях переменных можно использовать 
буквы, подчёркивание, символ доллара, 
арабские цифры.
● Названия переменных не могут начинаться с 
цифры,
● Для оформления однострочных комментариев 
используются //, многострочные и 
внутристрочные комментарии начинаются с /* и 
заканчиваются */.

57
уруктрСтруктура зыкязыка
● Ядро (ECMAScript);
● Объектная модель браузера (Browser Object 
Model);
● Объектная модель документа (Document Object 
Model).

58
тиннОсобенности ECMAScriptScrip
● Встраиваемый расширяемый не имеющий 
средств ввода/вывода язык программирования.
● 5 примитивных типов данных — Number, String, 
Boolean, Null и Undefined.
● Объектный тип данных — Object.
● 15 различных видов инструкций.

59
беннОсОсобенности ScripECMAScript 
((продолжение)лжение)
Блок не ограничивает область видимости переменной:
     function foo() {
          var sum = 0;
          for (var i = 0; i < 42; i += 2) {
              var tmp = i + 2;
              sum += i * tmp;
          }
          for (var i = 1; i < 42; i += 2) {
              sum += i*i;
          }
          alert(tmp);
          return sum;
      }
      foo();

60
беннОсОсобенности ScripECMAScript 
((продолжение)лжение)
Если переменная объявляется вне функции, то она 
попадает в глобальную область видимости:
var a = 42;
function foo() {
    alert(a);
}
foo();

61
беннОсОсобенности ScripECMAScript 
((продолжение)лжение)
Функция — это тоже объект:
// объявление функции
function sum(arg1, arg2) {
    return arg1 + arg2;
}
// задание функции с помощью инструкции
var sum2 = function(arg1, arg2) {
    return arg1 + arg2;
};
// задание функции с использованием 
// объектной формы записи
var sum3 = new Function("arg1", "arg2", 
"return arg1 + arg2;");

62
аяОбъектная демодель узрабраузера
● BOM — прослойка между ядром и DOM.
● Основное предназначение — управление 
окнами браузера и обеспечение их 
взаимодействия.
● Специфична для каждого браузера.
● Каждое из окон браузера представляется 
объектом window:
var contentsWindow;
contentsWindow = 
  window.open("http://cs.ifmo.ru","contents");

63
наяктОбъеОбъектная ельмомодель узерабрабраузера 
ро((продолжение)лжение
● Возможности BOM:
● управление фреймами;
● поддержка задержки в исполнении кода и 
зацикливания с задержкой;
● системные диалоги;
● управление адресом открытой страницы;
● управление информацией о браузере;
● управление информацией о параметрах монитора;
● ограниченное управление историей просмотра 
страниц;
● поддержка работы с HTTP cookie.

64
наОбъектная демомодель додокументамента
● С помощью JavaScript можно производить 
следующие манипуляции:
● получение узлов:
document.all("image1").outerHTML;
● изменение узлов;
● изменение связей между узлами;
● удаление узлов.

65
ниеивтраВстраивание в тра-свеб-страницыницы
● Внутри страницы:
<script type="text/javascript">
alert('Hello, World!');
</script>
● Внутри тега:
<a href="delete.php" onclick="return confirm('Вы 
уверены?');">Удалить</a>
● Отделение от разметки (используется DOM):
window.onload = function() {
    var linkWithAlert = document.getElementById("alertLink");
    linkWithAlert.onclick = function() {
        return confirm('Вы уверены?');
    };
};
...
<a href="delete.php" id="alertLink">Удалить</a>
● В отдельном файле:
<script type="text/javascript" 
src="http://Путь_к_файлу_со_скриптом"></script>

66
S6ES6 // S2ES2015+015+
● ES6 — новая версия языка ECMAScript, выпущенная в 
2015 г.
● Добавляет в синтаксис языка множество новых 
возможностей.
● Поддерживается практически всеми современными 
браузерами (хотя с этим всё ещё могут быть нюансы).
● Для работы в старых браузерах может потребоваться 
специальная программа — транспилер (transpiler).

67
жкдеПоПоддержка S6ES6 узебраузерамирами

68
Block ScScope ariaVariablesbl
● Два новых ключевых слова — let и const.
● ES5:
var x = 'outer';
function test(inner) {
  if (inner) {
    var x = 'inner'; // scope whole function
    return x;
  }
  return x; // gets redefined on line 4
}
test(false); // undefined 
test(true); // inner

69
ючеКлючевое слово let
● Позволяет объявить переменную, областью 
видимости которой является блок.
● ES6:
let x = 'outer';
function test(inner) {
  if (inner) {
    let x = 'inner'; // scope whole function
    return x;
  }
  return x; // gets redefined on line 4
}
test(false); // outer 
test(true); // inner

70
IIIIFE lymedia(I(Immediately IInvoked iounctFunction 
prExExpression)ion)
ES5: ES5 & IIFE («костыли»):
{ (function(){
  var private = 1;  var private2 = 1;
} })();
// 1
console.log(private); // Uncaught ReferenceError
console.log(private2);
ES6:
{
  let private3 = 1;
}
// Uncaught ReferenceError
console.log(private3);

71
ючеКлючевое слово const
Позволяет объявить константу:
// define MY_FAV as a constant and give it the value 7
const MY_FAV = 7;
// this will throw an error
MY_FAV = 20;
// will print 7
console.log('my favorite number is: ' + MY_FAV);
// trying to redeclare a constant throws an error
const MY_FAV = 20;
// the name MY_FAV is reserved for constant above,
// so this will fail too
var MY_FAV = 20;
// this throws an error too
let MY_FAV = 20;

72
Template LitLiteralsra
ES5:
var first = 'Adrian';
var last = 'Mejia';
console.log('Your name is ' + first 
    + ' ' + last + '.');
ES6:
const first = 'Adrian';
const last = 'Mejia';
console.log(`Your name is ${first} ${last}.`);

73
уктрДеструктуризацияурация
Деструктуризация (destructuring assignment) – особый 
синтаксис присваивания, при котором можно присвоить 
массив или объект сразу нескольким переменным, 
разбив его на части.
Пример — получение элемента из массива:
ES5: ES6:
var array = [1, 2, 3, 4]; const array = [1, 2, 3, 4];
var first = array[0]; const [first, ,third] = 
var third = array[2]; array;
console.log(first, console.log(first, 
third); // 1 3 third); // 1 3

74
изацияукесДеструктуризация — бменобмен 
значзначениямиениями
ES5: ES6:
var a = 1; let a = 1;
var b = 2; let b = 2;
var tmp = a; [a, b] = [b, a];
a = b;
b = tmp; console.log(a, b); // 2 1
// 2 1
console.log(a, b); 

75
ияуризацуктесДеструктуризация лькихеснескольких 
ращаемыхзввозвращаемых значзначенийени
ES5:
function margin() {
  var left=1, right=2, top=3, bottom=4;
  return { left: left, right: right, top: top, bottom: bottom };
}
var data = margin();
var left = data.left;
var bottom = data.bottom;
console.log(left, bottom); // 1 4
ES6:
function margin() {
  const left=1, right=2, top=3, bottom=4;
  return { left, right, top, bottom };
}
const { left, bottom } = margin();
console.log(left, bottom); // 1 4

76
уризацукесДеструктуризация  и лениеавсопоставление 
араметпараметровро
ES5:
var user = {firstName: 'Adrian', lastName: 'Mejia'};
function getFullName(user) {
  var firstName = user.firstName;
  var lastName = user.lastName;
  return firstName + ' ' + lastName;
}
console.log(getFullName(user)); // Adrian Mejia
ES6:
const user = {firstName: 'Adrian', lastName: 'Mejia'};
function getFullName({ firstName, lastName }) {
  return `${firstName} ${lastName}`;
}
console.log(getFullName(user)); // Adrian Mejia

77
цияуризауктрДеструктуризация объектата
ES5:
function settings() {
  return { display: { color: 'red' }, keyboard: { layout: 'querty'} };
}
var tmp = settings();
var displayColor = tmp.display.color;
var keyboardLayout = tmp.keyboard.layout;
console.log(displayColor, keyboardLayout); // red querty
ES6:
function settings() {
  return { display: { color: 'red' }, keyboard: { layout: 'querty'} };
}
const { display: { color: displayColor }, keyboard: { layout: 
keyboardLayout }} = settings();
console.log(displayColor, keyboardLayout); // red querty

78
асКлассы и объектыты
В ES6 появился новый синтаксис описания и 
инициализации объектов:
ES5: ES6:
var Animal = (function () { class Animal {
  function MyConstructor(name) {  constructor(name) {
    this.name = name;    this.name = name;
  }  }
  MyConstructor.prototype.speak =
    function speak() {  speak() {
    console.log(this.name +     console.log(this.name
      ' makes a noise.');      + ' makes a noise.');
  };  }
  return MyConstructor; }
})();
const animal =
var animal =   new Animal('animal');
  new Animal('animal'); // animal makes a noise.
// animal makes a noise. animal.speak(); 
animal.speak();

79
НасНаследованиедоние
Новые ключевые слова extends и super.
ES5: ES6:
var Lion = (function () { class Lion extends Animal {
  function MyConstructor(name){  speak() {
    Animal.call(this, name);
  }    super.speak();
    console.log(this.name + ' roars 
  // prototypal inheritance ');
  MyConstructor.prototype =  }
    Object.create(Animal.prototype); }
  MyConstructor.prototype.constructor = 
Animal; const lion = new Lion('Simba');
lion.speak(); // Simba makes a noise.
  MyConstructor.prototype.speak = 
  function speak() { // Simba roars.
    Animal.prototype.speak.call(this);
    console.log(this.name + ' roars ');
  };
  return MyConstructor;
})();
var lion = new Lion('Simba');
lion.speak(); // Simba makes a noise.
// Simba roars.

80
исыПромисы isespr((promises) месвместо ллбэколлбэков
ES5: ES6:
function printAfterTimeout(string, function printAfterTimeout(string, 
timeout, done){ timeout){
  setTimeout(function(){  return new Promise(
    done(string);    (resolve, reject) => {
  }, timeout);    setTimeout(function(){
}      resolve(string);
    }, timeout);
printAfterTimeout('Hello ', 2e3,   });
function(result){ }
  console.log(result);
printAfterTimeout('Hello ', 2e3)
  .then((result) => {
  // nested callback  console.log(result);
  printAfterTimeout(result +  return printAfterTimeout(result 
    'Reader', 2e3,     + 'Reader', 2e3);
    function(result){ }).then((result) => {
    console.log(result);  console.log(result);
  }); });
});

81
чнытреСтрелочные ункфункцииции
ES5:
var _this = this; // need to hold a reference
$('.btn').click(function(event){
  _this.sendData(); // reference outer this
});
$('.input').on('change',function(event){
  this.sendData(); // reference outer this
}.bind(this)); // bind to outer this
ES6:
// this will reference the outer one
$('.btn').click((event) => this.sendData());
// implicit returns
const ids = [291, 288, 984];
const messages = ids.map(value => `ID is ${value}`);

82
Цикл с итеитератороматоро
ES5:
// for
var array = ['a', 'b', 'c', 'd'];
for (var i = 0; i < array.length; i++) {
  var element = array[i];
  console.log(element);
}
// forEach
array.forEach(function (element) {
  console.log(element);
});
ES6:
// for ...of
const array = ['a', 'b', 'c', 'd'];
for (const element of array) {
    console.log(element);
}

83
трмеПараПараметры по умоумолчаниючанию
ES5: ES6:
function point(x, y, isFlag){ function point(x = 0, y = -1, 
  x = x || 0; isFlag = true){
  y = typeof(y) ===   console.log(x,y,isFlag);
    'undefined' ? -1 : y; }
  isFlag = 
    typeof(isFlag) === point(0, 0) // 0 0 true
      'undefined' ? point(0, 0, false) // 0 0 false
        true : isFlag; point(1) // 1 -1 true
  console.log(x,y, isFlag); point() // 0 -1 true
}
point(0, 0) // 0 0 true
point(0, 0, false) // 0 0 
false
point(1) // 1 -1 true
point() // 0 -1 true

84
-пstRest-параметрыраметры
Аналог vararg в Java.
ES5:
function printf(format) {
  var params = [].slice.call(arguments, 1);
  console.log('params: ', params);
  console.log('format: ', format);
}
printf('%s %d %.2f', 'adrian', 321, Math.PI);
ES6:
function printf(format, ...params) {
  console.log('params: ', params);
  console.log('format: ', format);
}
printf('%s %d %.2f', 'adrian', 321, Math.PI);

85
рацпеОперация sprespread
ES5: ES6:
Math.max.apply(Math, Math.max(...[2,100,1,6,43]) 
[2,100,1,6,43]) // 100 // 100
var array1 =    const array1 =    
  [2,100,1,6,43];  [2,100,1,6,43];
var array2 = const array2 = 
  ['a', 'b', 'c', 'd'];  ['a', 'b', 'c', 'd'];
var array3 = const array3 = 
  [false, true, null,   [false, true, null, 
    undefined];    undefined];
console.log(array1 console.log([...array1,
  .concat(array2,   ... array2, ...array3]);
array3));

86
5.2.2.5. синхАсинхронное иеклиент-нт
еррвсесерверное аимовзаимодействие.ействие
TMLDHDHTML и AJAX

87
DHTML
● Dynamic HTML — способ создания 
интерактивного веб-сайта, использующий 
сочетание:
● статичного языка разметки HTML;
● выполняемого на стороне клиента 
скриптового языка JavaScript;
● CSS (каскадных таблиц стилей);
● DOM (объектной модели документа).

88
ПримеПример аницытрстраницы DHTML
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
  <title>Заголовок страницы</title>
  <script type="text/javascript"> 
   window.onload= function () {
    myObj = document.getElementById("navigation");
    // .... какой-то код 
   }
  </script>
</head>
<body>
  <div id="navigation">
  </div>
</body>
</html>

89
тоЧто такое AJAX
● AJAX (Asynchronous Javascript and XML) — подход 
к построению интерактивных пользовательских 
интерфейсов веб-приложений.
● Основан на «фоновом» обмене данными 
браузера с веб-сервером.
● При обмене данными между клиентом и 
сервером веб-страница не перезагружается 
полностью.

90
ныноОсновные пыципринципы AJAX
● Использование технологии динамического 
обращения к серверу «на лету», без 
перезагрузки всей страницы полностью, 
например:
● с использованием XMLHttpRequest;
● через динамическое создание дочерних 
фреймов;
● через динамическое создание тега <script>.
● Использование DHTML для динамического 
изменения содержания страницы.

91
tpXMXMLHttpRequestue
● XMLHTTP (XMLHttpRequest, XHR) — набор API, 
позволяющий осуществлять HTTP-запросы к 
серверу без необходимости перезагружать 
страницу.
● Данные можно пересылать в виде XML, JSON, 
HTML или просто неструктурированным 
текстом.
● При пересылке используется текстовый 
протокол HTTP и потому данные должны 
передаваться в виде текста.

92
stpRMLHttXMLHttpRequest приме((пример)
var req;
function loadXMLDoc(url) {
    req = null;
    if (window.XMLHttpRequest) {
        try {
            req = new XMLHttpRequest();
        } catch (e){}
    } else if (window.ActiveXObject) {
        try {
            req = new ActiveXObject('Msxml2.XMLHTTP');
        } catch (e){
            try {
                req = new ActiveXObject('Microsoft.XMLHTTP');
            } catch (e){}
        }
    }
    if (req) {       
        req.open("GET", url, true);
        req.onreadystatechange = processReqChange;
        req.send(null);
    }
}

93
equesttpXMXMLHttpRequest имер((пример, 
ропродолжение)лжене)
function processReqChange() {
  try { // Важно!
    // только при состоянии "complete"
    if (req.readyState == 4) {
        // для статуса "OK"
        if (req.status == 200) {
            // обработка ответа
        } else {
            alert("Не удалось получить данные:\n" +
                req.statusText);
        }
    }
  }
  catch( e ) {
      // alert('Ошибка: ' + e.description);
      // В связи с багом XMLHttpRequest в Firefox 
 // приходится отлавливать ошибку
  }
}

94
твущимПреПреимущества и таткдоненедостатки AJAX
● Преимущества:
● экономия трафика;
● уменьшение нагрузки на сервер;
● ускорение реакции интерфейса;
● Недостатки:
● отсутствие интеграции со стандартными инструментами 
браузера;
● динамически загружаемое содержимое недоступно 
поисковикам;
● старые методы учёта статистики сайтов становятся 
неактуальными;
● усложнение проекта;
● требуется включенный JavaScript в браузере.

95
ПроПротокол bSoWebSocket
● WebSocket — протокол полнодуплексной связи 
поверх TCP-соединения, предназначенный для 
обмена сообщениями между браузером и веб-
сервером в режиме реального времени.
● Позволяет серверу отправлять данные браузеру без 
дополнительного запроса со стороны клиента.
● Обмен данными ведётся через отдельное TCP-
соединение.
● Поддерживается всеми современными браузерами 
(даже IE).
● Альтернатива — AJAX + Long Polling.

96
олокротПротокол ockbSWebSocket ро((продолжение)олжние
<script>
var webSocket = new WebSocket('ws://localhost/echo');
webSocket.onopen = function(event) {
alert('onopen');
webSocket.send("Hello Web Socket!");
};
webSocket.onmessage = function(event) {
alert('onmessage, ' + event.data);
webSocket.close();
};
webSocket.onclose = function(event) {
alert('onclose');
};
</script>

97
теиоБибБиблиотека jQujQuery
● JS-библиотека, предназначенная для разработки 
DHTML и AJAX-приложений.
● Упрощает доступ к элементам DOM с помощью кучи 
разных способов.
● Упрощает и унифицирует (для разных браузеров) 
реализацию AJAX.
● Упрощает добавление визуальных эффектов.
● Ключевым элементом API является функция (объект) 
$ и её синоним jQuery.

98
AJAX на jQujQuery
Без jQuery (и без кроссбраузерности):
req = new XMLHttpRequest();
req.open("POST", "some.php", true);
req.onreadystatechange = processReqChange;
req.send(null);
if (req.readyState == 4) {
    if (req.status == 200) {
        alert( "Data Saved " );
    }
}
С jQuery:
$.ajax({
  type: "POST",
  url: "some.php",
  data: {name: 'John', location: 'Boston'},
  success: function(msg){
    alert( "Data Saved: " + msg );
  }
});

99
y:jQujQuery: иетвйсдеаимовзаимодействие с DODOM
$("div.test")
    .add("p.quote")
    .addClass("blue")
    .slideDown("slow");
$("a").click(function() {
    alert("Hello world!");
});
$( "div.demo-container" )
  .html( "<p>All new content. </p>" );

100
y:uejQjQuery: таабработа с событиямитиями
$("#foo").bind( "mouseenter mouseleave", function() {
  $( this ).toggleClass( "entered" );
});
$( document ).ready(function() {
  $( "#foo" ).bind( "click", function( event ) {
    alert( "The mouse cursor is at (" +
      event.pageX + ", " + event.pageY +
      ")" );
  });
});
$( "#other" ).click(function() {
  $( ".target" ).change();
});
$( "#target" ).click(function() {
  alert( "Handler for .click() called." );
});

101
y:jQujQuery: тыффеэффекты и анимацанимация
$( "#clickme" ).click(function() {
  $( "#book" ).animate({
    opacity: 0.25,
    left: "+=50",
    height: "toggle"
  }, 5000, function() {
    // Animation complete.
  });
});
$( "#foo" ).slideUp( 300 )
  .delay( 800 ).fadeIn( 400 );
$( "#clickme" ).click(function() {
  $( "#book" ).slideDown( "slow", function() {
    // Animation complete
  });
});

102
SuSuperAgentrAgent
API для реализации AJAX:
request
   .post('/api/pet')
   .send({ name: 'Manny', species: 'cat' })
   .set('X-API-Key', 'foobar')
   .set('Accept', 'application/json')
   .end(function(err, res){
     if (err || !res.ok) {
       alert('Oh no! Error');
     } else {
       alert('yay got ' + JSON.stringify(res.body));
     }
   });

103
3. ские»ссла«К«Классические» 
прнеерининтернет-приложенияилоения

104
рнИнтернет-приложения-прилия
● Интернет-приложение — это сайт с той или иной 
динамической функциональностью на стороне 
сервера.
● Интернет-приложение осуществляет вызов 
программ на стороне сервера, к примеру:
● Браузер отправляет на веб-сервер запрос на 
получение HTML-формы.
● Веб-сервер формирует HTML-форму и возвращает 
её браузеру.
● Браузер отправляет на сервер новый запрос с 
данными из HTML-формы.
● Веб-сервер делегирует обработку данных из 
формы какой-либо программе на стороне сервера.

105
тиннОсобенности хитархитектурыуры
● Динамический контент формируют серверные 
сценарии.
● Разметка страниц задаётся с помощью 
шаблонов.
● Клиент-серверное взаимодействие реализуется 
либо «вручную», либо с помощью 
низкоуровневого фреймворка а-ля JQuery.
● Активно используются архитектурные паттерны, 
за их реализацию отвечает сам программист.

106
иилоехноТехнологии лядля ияанздсоздания веб-еб
рилоприложенийений
● HTML over HTTP
● Common Gateway Interface (CGI)
● FastCGI
● PHP
● Servlets
● JavaServer Pages (JSP)
● JavaServer Faces

107
3.1. ерСерверныеерные
сценарии

108
нырвСерверные цесценариинар
● Программы, вызываемые на сервере для 
формирования динамического контента.
● Веб-сервер «делегирует» им на обработку 
запрос и «транслирует» сформированный ими 
ответ клиенту.
● Могут использоваться вместе со «статикой», 
могут – сами по себе.
Сервер-
Веб-
Клиент ный
сервер сценарий

109
. .1.13.1.1. GICGI & asFastCGItCGI

110
moCommon waatGateway IntInterfacerfac
● CGI — простейший механизм вызова 
пользователем программ на стороне сервера.
● Данные отправляются программе посредством 
HTTP-запроса, формируемого веб-браузером.
● То, какая именно программа будет вызвана, 
обычно определяется URL запроса.
● Каждый запрос обрабатывается отдельным 
процессом CGI-программы.
● Взаимодействие программы с веб-сервером 
осуществляется через stdin и stdout.

111
ниеыпВыполнение цеGI-сCGI-сценариевнарие
Один запрос:

112
нениеыпВыполнение иевI-сценCGI-сценариев 
ро((продолжение)лжение
Параллельная обработка нескольких запросов:

113
ПримеПример изацалререализации це-сGICGI-сценарияария
#include <stdio.h>
int main(void) {
printf("Content-Type:
text/html;charset=UTF-8\n\n");
printf("<HTML>\n");
printf("<HEAD>\n");
printf("<TITLE>Hello, World!</TITLE>\n");
printf("</HEAD>\n");
printf("<BODY>\n");
printf("<H1>Hello, World</H1>\n");
printf("</BODY>\n");
printf("</HTML>\n");
return 0;
}

114
цияуранфигКонфигурация -свеб-сервера
Apache (httpd.conf):
ScriptAlias /cgi-bin/ "/opt/www/cgi-bin/" 

115
инсДостоинства и киатнеднедостатки CGI-I-
сценариевенариев
● Достоинства:
● Программы могут быть написаны на множестве языков 
программирования.
● «Падение» CGI-сценария не приводит к «падению» всего 
сервера.
● Исключены конфликты при параллельной обработке 
нескольких запросов.
● Хорошая поддержка веб-серверами.
● Недостатки:
● Высокие накладные расходы на создание нового процесса.
● Плохая масштабируемость.
● Слабое разделение уровня представления и бизнес-
логики.
● Могут быть платформо-зависимыми.

116
astCFastCGI
● Развитие технологии CGI.
● Все запросы могут обрабатываться одним 
процессом CGI-программы (фактическая 
реализация определяется программистом).
● Веб-сервер взаимодействует с процессом через 
UNIX Domain Sockets или TCP/IP (а не через stdin 
и stdout).

117
3.1.2. ныеерерСерверные 
сценарии на PHP

118
Язык PHPHP
● PHP (PHP: Hypertext Preprocessor) — скриптовый 
язык, часто используемый для написания веб-
приложений.
● Первая версия разработана в 1994 г. Расмусом 
Лердорфом (Rasmus Lerdorf).
● Распространяется по лицензии с открытым 
исходным кодом.

119
исинтакСинтаксис PHPHP
● Интерпретатор выполняет код, находящийся 
внутри ограничителей:
<?php
  echo 'Hello, world!'; 
?>
● Имена переменных начинаются с символа «$»:
$hello = 'Hello, world!';
● Инструкции разделяются символом «;»:
$a = 'Hello '; $b = 'world!';
$c = $b + $a;

120
интакСинтаксис PHP до(п(продолжение)ние
● Весь текст вне ограничителей оставляется 
интерпретатором без изменений:
<html>
 <head>
  <title>Тестируем PHP</title>
 </head>
 <body>
  <?php echo 'Hello, world!'; ?>
 </body>
</html>

121
ипыТипы данданныхны
● PHP — язык с динамической типизацией; при 
объявлении переменных их тип не указывается.
● 6 скалярных типов данных — integer, float, 
double, boolean, string и NULL. Диапазоны 
числовых типов зависят от платформы.
● 3 нескалярных типа — ресурс (например, 
дескриптор файла), массив и объект.
● 4 псевдотипа — mixed, number, callback и void.

122
ныельбалоупСуперглобальные асмассивысив
balerg((Superglobal rraArrays)ys
Предопределённые массивы, имеющие 
глобальную область видимости:
● $_GLOBALS — массив всех глобальных 
переменных.
● $_SERVER — параметры, которые ОС передаёт 
серверу при его запуске.
● $_ENV — переменные среды ОС.

123
ныельбалоупСуперглобальные сивасмассивы 
ро((продолжение)лжение
● $_GET, $_POST — параметры GET- и POST-запроса:
<?php
echo 'Привет, '
.htmlspecialchars($_GET["name"])
.'!';
?>
● $_FILES — сведения об отправленных методом 
POST файлах.
● $_COOKIE — массив cookies.
● $_REQUEST — содержит элементы из массивов 
$_GET, $_POST, $_COOKIE и $_FILES.
● $_SESSION — данные HTTP-сессии.

124
жкдеПоПоддержка ООПОП
● Полная поддержка появилась в PHP5.
● Реализованы все основные механизмы ООП — 
инкапсуляция, полиморфизм и наследование.
● Поля и методы могут быть приватными (private), 
публичными (public) и защищёнными (protected).
● Можно объявлять финальные и абстрактные методы и 
классы (аналогично Java).
● Множественное наследование не поддерживается, но 
есть интерфейсы и механизм особенностей (traits).
● Объекты передаются по ссылке.
● Обращение к константам, статическим свойствам и 
методам класса осуществляется с помощью 
конструкции «::».

125
ПримеПример -кPHP-класса
class C1 extends C2 implements I1, I2
{
  private $a;
  protected $b;
  function __construct($a, $b)
  {
    parent::__construct($a, $b);
    $this->a = $a;
    $this->b = $b;
  }
  public function plus()
  {
    return $this->a + $this->b;
  }
/* ............... */
}
$d = new C1(1, 2);
echo $d->plus(); // 3

126
HPPHP raTraitsits
Трейты — инструментарий для повторного использования 
кода. Появился в PHP 5.4.
<?php
trait ezcReflectionReturnInfo {
    function getReturnType() { /*1*/ }
    function getReturnDescription() { /*2*/ }
}
class ezcReflectionMethod extends ReflectionMethod {
    use ezcReflectionReturnInfo;
    /* ... */
}
class ezcReflectionFunction extends ReflectionFunction {
    use ezcReflectionReturnInfo;
    /* ... */
}
?>

127
рацияфигонКонфигурация и варианты ованияьзолиспользования 
ретатинтерпинтерпретатора PHP
● Конфигурационные параметры хранятся в файле 
php.ini.
● Можно подключать дополнительные модули, 
расширяющие возможности языка (например, 
добавляющие поддержку взаимодействия с СУБД).
● Способы использования интерпретатора PHP:
● С помощью SAPI / ISAPI (например, mod_php для 
Apache).
● С помощью CGI / FastCGI.
● Через интерфейс командной строки.

128
. .3.13.1.3. ервСервлетылет

129
атфоПлПлатформа vaJaJava EE
● Набор стандартов и спецификаций для создания 
корпоративных приложений на Java.
● Cпецификации Java EE реализуются серверами 
приложений:
● Apache Tomcat
● Sun / Oracle GlassFish
● BEA / Oracle WebLogic
● IBM WebSphere
● RedHat JBoss

130
JaJava SeServletsvlts
● Сервлеты — это серверные сценарии, 
написанные на Java.
● Жизненным циклом сервлетов управляет веб-
контейнер (он же контейнер сервлетов).
● В отличие от CGI, запросы обрабатываются в 
отдельных потоках (а не процессах) на веб-
контейнере.

131
кабрабоОбработка апроHTHTTP-запросов сервлетомлет
Один запрос:

132
ткаабОбработка овосапP-зHTHTTP-запросов омлесерсервлетом 
(п(продолжение)лжение
Параллельная обработка нескольких запросов:

133
ваесущимПреимущества и кинедоснедостатки сервлсервлетоветов
● Преимущества сервлетов:
● Выполняются быстрее, чем CGI-сценарии.
● Хорошая масштабируемость.
● Надёжность и безопасность (реализованы на 
Java).
● Платформенно-независимы.
● Множество инструментов мониторинга и отладки.
● Недостатки сервлетов:
● Слабое разделение уровня представления и 
бизнес-логики.
● Возможны конфликты при параллельной 
обработке запросов.

134
3.1.4. ткаазраРазработка 
сервлетосервлетов

135
ураитеАрхитектура -квеб-контейнерантейнера

136
ткраОбработка HTTP-запросаP-запро
1. Браузер формирует HTTP-запрос и отправляет его на сервер.

137
ткаОбработка саP-зHTTP-запроса од((продолжение)олжен
2. Веб-контейнер создаёт объекты HttpServletRequest и 
HttpServletResponse.

138
ткаОбработка саP-зHTTP-запроса од((продолжение)олжен
3. Веб-контейнер вызывает метод service сервлета.

139
ткаОбработка саP-зHTTP-запроса од((продолжение)олжен
4. Сервлет формирует ответ и записывает его в поток вывода 
HttpServletResponse.

140
vltpSeHtHttpServlet APAPI
<<interface>> <<interface>> <<interface>>
ServletRequest Servlet ServletResponse
service(req,resp) getWriter():PrintWriter
getOutputStream
setContentType(MIME)
setContentLength(int)
<<interface>>
HttpServletRequest
HttpServlet <<interface>>
getHeader(name) {abstract} HttpServletResponse
getHeaders(name)
getHeaderNames():Enum service setHeader
getIntHeader(name) doGet setDateHeader
getDateHeader(name) doPost setIntHeader
SampleServlet
doGet

141
ПримеПример сервлетата
package sample.servlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
// Support classes
import java.io.IOException;
import java.io.PrintWriter;
public class SampleServlet extends HttpServlet {
    public void doGet(HttpServletRequest request,
        HttpServletResponse response)
        throws IOException {
        // Заголовок страницы
        String pageTitle = “Пример сервлета”;

142
меПример влсервлета одолж(п(продолжение)ни
        // Content Type
        response.setContentType(“text/html”);
        PrintWriter out = response.getWriter();
        // Формируем HTML
        out.println(“<html>”);
        out.println(“<head>”);
        out.println(“<title>” + pageTitle + “</title>”);
        out.println(“</head>”);
        out.println(“<body bgcolor=’white’>”);
        out.println(“<h3>” + pageTitle + “</h3>”);
        out.println(“<p>”);
        out.println(“Hello, world!”);
        out.println(“</p>”);
        out.println(“</body>”);
        out.println(“</html>”);
    }
}

143
цияуранфигКонфигурация рвсервлета

144
цияуронфигКонфигурация етрвлсервлета дол((продолжение)ение

145
нныйЖизнЖизненный цикцикл сервлета
● Жизненным циклом сервлета управляет веб-
контейнер.
● Методы, управляющие жизненным циклом, 
должен вызывать только веб-контейнер.

146
ыйеннизЖизненный икцикл влетасерсервлета 
(п(продолжение)лжение
1. Загрузка класса сервлета.
Проверяются пути: /WEB-INF/classes/, WEB-INF/lib/*.jar, стандартные 
классы Java SE и классы веб-контейнера.

147
ыйеннизЖизненный икцикл влетасерсервлета 
(п(продолжение)лжение
2. Создание экземпляра сервлета.

148
ыйеннизЖизненный икцикл влетасерсервлета 
(п(продолжение)лжение
3. Вызов метода init.

149
ыйеннизЖизненный икцикл влетасерсервлета 
(п(продолжение)лжение
4. Обработка HTTP-запросов.

150
ыйеннизЖизненный икцикл влетасерсервлета 
(п(продолжение)лжение
5. Вызов метода destroy.

151
нтеКонтекст рвсервлетовто
● API, с помощью которого сервлет может 
взаимодействовать со своим контейнером.
● Доступ к методам осуществляется через 
интерфейс javax.servlet.ServletContext.
● У всех сервлетов внутри приложения общий 
контекст.
● В контекст можно помещать общую для всех 
сервлетов информацию (методы getAttribute и 
setAttribute).
● Если приложение — распределённое, то на 
каждом экземпляре JVM контейнером создаётся 
свой контекст.

152
онтеКонтекст оввлесервлетов одолж((продолжение)ни
import java.io.*;  
import javax.servlet.*;  
import javax.servlet.http.*;  
public class DemoServlet extends HttpServlet{  
    public void doGet(HttpServletRequest req,HttpServletResponse res)  
        throws ServletException,IOException {  
        res.setContentType("text/html");  
        PrintWriter pw=res.getWriter();
        //creating ServletContext object  
        ServletContext context=getServletContext();  
        //Getting the value of the initialization parameter
        // and printing it  
        String driverName=context.getInitParameter("dname");  
        pw.println("driver name is="+driverName);  
        pw.close();  
    }
}

153
P-сHTHTTP-сессииии
● HTTP — stateless-протокол.
● javax.servlet.HttpSession — интерфейс, позволяющий 
идентифицировать конкретного клиента (браузер) при обработке 
множества HTTP-запросов от него.
● Экземпляр HttpSession создаётся при первом обращении клиента к 
приложению и сохраняется некоторое (настраиваемое) время после 
последнего обращения.
● Идентификатор сессии либо помещается в cookie, либо добавляется к 
URL. Если удалить этот идентификатор, то сервер не сможет 
идентифицировать клиента и создаст новую сессию.
● В экземпляр HttpSession можно помещать общую для этой сессии 
информацию (методы getAttribute и setAttribute).
● Сессия «привязана» к конкретному приложению; у разных приложений 
— разные сессии.
● В распределённом окружении обеспечивается сохранение 
целостности данных в HTTP-сессии (независимо от количества 
экземпляров JVM).

154
ииP-сHTHTTP-сессии допро((продолжение)ние
public class SimpleSession extends HttpServlet {
  public void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, java.io.IOException {
    response.setContentType("text/html");
    java.io.PrintWriter out = response.getWriter();
    HttpSession session = request.getSession();
    out.println("<html>");
    out.println("<head>");
    out.println("<title>Simple Session Tracker</title>");
    out.println("</head>");
    out.println("<body>");
    out.println("<h2>Session Info</h2>");
    out.println("session Id: " + session.getId() + "<br><br>");
    out.println("The SESSION TIMEOUT period is "
        + session.getMaxInactiveInterval() + " seconds.<br><br>");
    out.println("Now changing it to 20 minutes.<br><br>");
    session.setMaxInactiveInterval(20 * 60);
    out.println("The SESSION TIMEOUT period is now "
        + session.getMaxInactiveInterval() + " seconds.");
    out.println("</body>");
    out.println("</html>");
  }
}

155
цияизерДиспетчеризация овросзазапросов влерсервлетамиет
● Сервлеты могут делегировать обработку запросов 
другим ресурсам (сервлетам, JSP и HTML-страницам).
● Диспетчеризация осуществляется с помощью 
реализаций интерфейса 
javax.servlet.RequestDispatcher.
● Два способа получения RequestDispatcher — через 
ServletRequest (абсолютный или относительный URL) 
и ServletContext (только абсолютный URL).
● Два способа делегирования обработки запроса — 
forward и include.

156
изчеспДиспетчеризация осзапросов амвлетсервлетами 
(п(продолжение)лжение
import java.io.*;  
import javax.servlet.*;  
import javax.servlet.http.*;  
public class MyServlet extends HttpServlet{  
public void doGet(HttpServletRequest req,
  HttpServletResponse res)  
throws ServletException,IOException {  
RequestDispatcher dispatcher =
request.getRequestDispatcher("index.jsp");
dispatcher.forward( request, response );
}
}

157
трилФильтры розазапросов
● Фильтры позволяют осуществлять пред- и 
постобработку запросов до и после передачи их ресурсу 
(сервлету, JSP или HTML-странице).
● Пример предобработки — допуск к странице только 
авторизованных пользователей.
● Пример постобработки — запись в лог времени 
обработки запроса.
● Реализуют интерфейс javax.servlet.Filter.
● Ключевой метод — doFilter.
● Метод doFilter класса FilterChain передаёт управление 
следующему фильтру или целевому ресурсу; 
таким образом, возможна реализация 
последовательностей фильтров,  обрабатывающих 
один и тот же запрос.

158
рыльФильтры овосзазапросов одолж(п(продолжение)ни
import javax.servlet.*;  
  
public class MyFilter implements Filter{  
  
    public void init(FilterConfig arg0) throws ServletException {}  
      
    public void doFilter(ServletRequest req, ServletResponse resp,  
        FilterChain chain) throws IOException, ServletException {  
          
        PrintWriter out=resp.getWriter();  
        out.print("filter is invoked before");  
              
        chain.doFilter(req, resp);//sends request to next resource  
          
        out.print("filter is invoked after");  
    }  
    public void destroy() {}  
}  

159
цияуранфигКонфигурация филфильтров
<web-app>  
      
    <servlet>  
        <servlet-name>s1</servlet-name>  
        <servlet-class>HelloServlet</servlet-class>  
    </servlet>  
      
    <servlet-mapping>  
        <servlet-name>s1</servlet-name>  
        <url-pattern>/servlet1</url-pattern>  
    </servlet-mapping>  
      
    <filter>  
        <filter-name>f1</filter-name>  
        <filter-class>MyFilter</filter-class>  
    </filter>  
       
    <filter-mapping>  
        <filter-name>f1</filter-name>  
        <url-pattern>/servlet1</url-pattern>  
    </filter-mapping>  
            
</web-app>  

160
3.2. аблонШаблоны 
ияанроектиропроектирования в вебвеб-
рилоприложенияхения

161
ныноОсновные няпонятияия
● Шаблон проектирования или паттерн — 
повторимая архитектурная конструкция, 
представляющая собой решение проблемы 
проектирования в рамках некоторого часто 
возникающего контекста (© Wikipedia).
● Описывает подход к решению типовой задачи.
● Одну и ту же задачу часто можно решить с 
использованием разных шаблонов.
● Существует много литературы с описанием 
различных шаблонов проектирования.

162
чеЗаЗачем нужны тепатпаттернырны
● Позволяют избежать «типовых» ошибок при 
разработке типовых решений.
● Позволяют кратко описать подход к решению задачи 
— программистам, знающим шаблоны, проще 
обмениваться информацией.
● Легче поддерживать код — его поведение более 
предсказуемо.

163
-пGoGoF-паттернытены
● Описаны в книге 1994 г. «Design Patterns: Elements of 
Reusable Object-Oriented Software» («Приёмы 
объектно-ориентированного проектирования. 
Паттерны проектирования»).
● Авторы —  Эрих Гамма (Erich Gamma), Ричард Хелм 
(Richard Helm), Ральф Джонсон (Ralph Johnson), Джон 
Влиссидс (John Vlissides) — Gang of Four (GoF, «Банда 
Четырёх»).
● В книге описаны 23 классических шаблона 
проектирования.

164
иедающПоПорождающие -патGoF-паттернытерны
● Abstract Factory — Абстрактная фабрика.
● Builder — Строитель.
● Factory Method — Фабричный метод.
● Prototype — Прототип.
● Singleton — Одиночка.

165
ерПример егаюропопорождающего патF-GoGoF-паттернаерн
Singleton (одиночка):
● Гарантирует, что у класса есть только один 
экземпляр, и предоставляет к нему глобальную точку 
доступа.
● Можно пользоваться экземпляром класса (в отличие 
от статических методов).

166
урнуктрСтруктурные -пGoGoF-паттернытены
● Adapter — Адаптер.
● Bridge — Мост.
● Composite — Компоновщик.
● Decorator — Декоратор.
● Facade — Фасад.
● Flyweight — Приспособленец.
● Proxy — Заместитель.

167
меПрПример нотрструктурного -пGoF-паттернана
Decorator (декоратор) — позволяет динамически подключать 
дополнительное поведение к объекту без использования 
наследования.

168
иенчдеПоПоведенческие -пGoGoF-паттернытены
● Chain of responsibility — Цепочка обязанностей.
● Command — Команда.
● Interpreter — Интерпретатор.
● Iterator — Итератор.
● Mediator — Посредник.
● Memento — Хранитель.
● Observer — Наблюдатель.
● State — Состояние.
● Strategy — Стратегия.
● Template — Шаблонный метод.
● Visitor — Посетитель.

169
ерПриПример гоенедпоповеденческого патF-GoF-паттернаер
Command (команда) — команда передаётся с помощью 
специального объекта, который заключает в себе само 
действие (т. е. логику) и его параметры.

170
урныеитеАрхитектурные абшаблоныны
● Более высокий уровень по сравнению с 
шаблонами проектирования.
● Описывают архитектуру всей системы или 
приложения.
● Обычно имеют дело не с отдельными классами, 
а с целыми компонентами или модулями.
● Компоненты и модули могут быть построены с 
использованием различных шаблонов 
проектирования.

171
ураитеАрхитектура -пвеб-приложенийний
3 уровня архитектуры:

172
ураитеАрхитектура Model 1 Ja((Java)va
● Предназначена для проектирования 
приложений небольшого масштаба и сложности.
● За обработку данных и представления отвечает 
один и тот же компонент (сервлет или JSP).

173
ШабШаблон MVC

174
ураитеАрхитектура Model 2 Ja((Java)va
● Предназначена для проектирования достаточно 
сложных веб-приложений.
● За обработку и представление данных отвечают 
разные компоненты (сервлеты и JSP).

175
акКак атьизореализовать deModel 2
● Вручную (сервлеты + какой-нибудь 
шаблонизатор + какая-нибудь бизнес-логика).
● Использовать фреймворк:
● Apache Struts.
● Apache Velocity.
● JavaServer Faces (в составе Java EE).
● Spring Web MVC.

176
3.3. ацияШаблонизШаблонизация 
страництраниц

177
ЗаЗачем нооно нужножн
● Делать разметку страницы с помощью 
серверного сценария неудобно.
● Интерфейс приложения обычно 
состоит из типовых повторяющихся 
элементов.
● В больших проектах разработкой 
логики и интерфейсов обычно 
занимаются разные люди.

178
енумИнструменты ацблошаблонизации страниц
● JavaServer Pages.
● FreeMarker Template Engine 
(FTL).
● Thymeleaf.
● Velocity.
…тысячи их!

179
3.3.1. erServaJavaServer 
agPages

180
vaSJaJavaServer Pagesage
● Страницы JSP — это текстовые файлы, 
содержащие статический HTML и JSP-элементы.
● JSP-элементы позволяют формировать 
динамическое содержимое.
● При загрузке в веб-контейнер страницы JSP 
транслируются компилятором (jasper) в 
сервлеты.
● Позволяют отделить бизнес-логику от уровня 
представления (если их комбинировать с 
сервлетами).

181
вамуПрПреимущества и досненедостатки JSP
● Преимущества:
● Высокая производительность — транслируются в 
сервлеты.
● Не зависят от используемой платформы — код 
пишется на Java.
● Позволяют использовать Java API.
● Простые для понимания — структура похожа на 
обычный HTML.
● Недостатки:
● Трудно отлаживать, если приложение целиком 
основано на JSP.
● Возможны конфликты при параллельной обработке 
нескольких запросов.

182
тырвСервлеты и JSP
public class HelloServlet extends HttpServlet {
    private static final String DEFAULT_NAME = “World”;
    public void doGet(HttpServletRequest request,  
        HttpServletResponse response)
        throws IOException {
        generateResponse(request, response);
    }
    public void doPost(HttpServletRequest request, 
        HttpServletResponse response)
        throws IOException {
        generateResponse(request, response);
    }
    public void generateResponse(HttpServletRequest 
request, 
        HttpServletResponse response) throws IOException {
        String name = reqest getParameter(“name”);

183
тырвСервлеты и JSP допр((продолжение)ние
        if ( (name == null) || (name.length() == 0) ) {
            name = DEFAULT_NAME;
        }
        response.setContentType(“text/html”);
        PrintWriter out = response.getWriter();
        out.println(“<HTML>”);
        out.println(“<HEAD>”);
        out.println(“<TITLE>Hello Servlet</TITLE>”);
        out.println(“</HEAD>”);
        out.println(“<BODY BGCOLOR=’white’>”);
        out.println(“<B>Hello, “ + name + “</B>”);
        out.println(“</BODY>”);
        out.println(“</HTML>”);
        out.close();
    }
}

184
тырвСервлеты и JSP допр((продолжение)ние
<%! private static final String DEFAULT_NAME = “World”; 
%>
<html>
<head>
<title>Hello JavaServer Page</title>
</head>
<%-- Determine the specified name (or use default) --%>
<%
    String name = request.getParameter(“name”);
    if ( (name == null) || (name.length() == 0) ) {
        name = DEFAULT_NAME;
    }
%>
<body bgcolor=’white’>
<b>Hello, <%= name %></b>
</body>
</html>

185
нннеЖизЖизненный цикцикл JSP

186
ыйенЖизненный цикл JSP (про(продолжение)лжен
1. Трансляция.

187
ыйенЖизненный цикл JSP (про(продолжение)лжен
2. Компиляция сервлета.

188
ыйенЖизненный цикл JSP (про(продолжение)лжен
3. Загрузка сервлета веб-контейнером.

189
ыйенЖизненный цикл JSP (про(продолжение)лжен
4. Создание веб-контейнером экземпляра сервлета.

190
ыйенЖизненный цикл JSP (про(продолжение)лжен
5. Инициализация сервлета.

191
ыйенЖизненный цикл JSP (про(продолжение)лжен
6. Обработка запросов.

192
ыйенЖизненный цикл JSP (про(продолжение)лжен
6. Обработка запросов.

193
ыйенЖизненный цикл JSP (про(продолжение)лжен
7. Вызов метода jspDestroy.

194
-эJSPJSP-элементыменты
● 2 варианта синтаксиса — на базе HTML и XML. 
● Обозначаются тегами <% %> (HTML-вариант):
<html>
<%-- scripting element --%>
</html>
● Существует 5 типов JSP-элементов:
● Комментарий — <%-- Comment --%>;
● Директива — <%@ directive %>;
● Объявление — <%! decl %>;
● Скриптлет — <% code %>;
● Выражение — <%= expr %>.

195
меКомментариинтар
Поддерживаются 3 типа комментариев:
● HTML-комментарии:
<!-- This is an HTML comment. 
     It will show up in the response. -->
● JSP-комментарии:
<%-- This is a JSP comment. 
     It will only be seen in the JSP code.
     It will not show up in either the servlet code 
     or the response.
--%>
● Java-комментарии:
<%
    /* This is a Java comment. 
       It will show up in the servlet code.
       It will not show up in the response. */
%>

196
иреДирективытив
Управляют процессом трансляции страницы в 
сервлет.
• Синтаксис:
<%@ DirectiveName [attr=”value”]* %>
• Примеры:
<%@ page session=”false” %>
<%@ include file=”incl/copyright.html” %>

197
Объявленияния
Позволяют объявлять поля и методы:
• Синтаксис:
<%! JavaClassDeclaration %>
• Примеры:
<%! 
public static final String DEFAULT_NAME = “World”; 
%>
<%! 
public String getName(HttpServletRequest request) {
    return request.getParameter(“name”);
}
%>
<%! int counter = 0; %>

198
риптСкриптлетыты
Позволяют задать Java-код, который будет 
выполняться при обработке запросов (при вызове 
метода _jspService).
• Синтаксис:
<% JavaCode %>
• Примеры:
<% int i = 0; %>
<% if ( i > 10 ) { %>
    I am a big number
<% } else { %>
    I am a small number
<% } %>

199
ыражВыраженияния
Позволяют вывести результат вычисления 
выражения.
• Синтаксис:
<%= JavaExpression %>
• Примеры:
<B>Ten is <%= (2 * 5) %></B>
Thank you, <I><%= name %></I>, for registering 
for the soccer league.
The current day and time is: <%= new 
java.util.Date() %>

200
ннылёдеопПрПредопределённые мепеременныенны
В процессе трансляции контейнер добавляет в 
метод _jspService ряд объектов, которые можно 
использовать в скриптлетах и выражениях:
Имя переменной Класс
application javax.servlet.ServletContext
config javax.servlet.ServletConfig
exception java.lang.Throwable
out javax.servlet.jsp.JspWriter
page java.lang.Object
PageContext javax.servlet.jsp.PageContext
request javax.servlet.ServletRequest
response javax.servlet.ServletResponse
session javax.servlet.http.HttpSession

201
нылёнедПредопределённые ыееннемерпеременные 
(п(продолжение)лжение
● Exception — используется только на страницах-
перенаправлениях с информацией об ошибках 
(Error Pages).
● Page — API для доступа к экземпляру класса 
сервлета, в который транслируется JSP.
● PageContext — контекст JSP-страницы.

202
тивиреДиректива Pageage
● Позволяет задавать параметры, используемые 
контейнером при управлении жизненным 
циклом страницы.
● Обычно расположена в начале страницы.
● На одной странице может быть задано 
несколько директив page с разными указаниями 
контейнеру. 
● Синтаксис:
<%@ page attribute="value" %>

203
тытрАтрибуты тивдирдирективы Pageage
Атрибут Для чего нужен
buffer Задаёт параметры буферизации и размер 
буфера для потока вывода сервлета.
autoFlush Указывает, автоматически ли выгружается 
содержимое буфера при его переполнении.
contentType Позволяет задать Content Type и кодировку 
страницы.
errorPage Позволяет задать страницу, на которую 
будет осуществлено перенаправление при 
возникновении Runtime Exception.
isErrorPage Указывает, является ли текущая страница 
Error Page.
extends Позволяет задать имя родительского класса, 
от которого будет наследоваться сервлет.

204
тыибАтрибуты ективирдирективы agPage
од(п(продолжение)олжение)
Атрибут Для чего нужен
import Импорт классов или пакетов.
info Задаёт строку, которую будет возвращать 
метод getServletInfo().
isThreadSafe Если isThreadSafe == false, то контейнер 
блокирует параллельную обработку 
нескольких запросов страницей.
language Позволяет задать язык программирования, на 
котором пишутся скриптовые элементы на 
странице (по умолчанию — Java).
session Указывает контейнеру, создавать ли ему 
предопределённую переменную session.
isELIgnored Указывает, вычисляются EL-выражения 
контейнером, или нет.
isScriptingEnabled Указывает, обрабатываются ли скриптовые 
элементы.

205
JSP Actionstio
● XML-элементы, позволяющие управлять 
поведением сервлета.
● Синтаксис:
<jsp:action_name attribute="value" />
JSP Action Для чего нужен
jsp:include Включает в страницу внешний файл во 
время обработки запроса.
jsp:useBean Добавляет на страницу экземпляр Java 
Bean с заданным контекстом.
jsp:getProperty Получение и установка свойств Java Bean.
jsp:setProperty
jsp:forward Перенаправление на другую страницу.

206
цияуранфигКонфигурация JSJSP
● Задаётся в дескрипторе развёртывания 
(web.xml).
● Находится внутри элемента jsp-config.
● Пример:
<jsp-config>
<property name="initial-capacity" 
  value="1024" >
</jsp-config>

207
JSJSP rdStandaStandard Tag rarLibLibrary (JST(JSTL)L)
● Расширение JSP, добавляющее возможность 
использования дополнительных тегов, 
решающих типовые задачи.
● Примеры задач:
● Условная обработка.
● Создание циклов, вывод массивов / коллекций.
● Поддержка интернационализации.
● Рекомендуется использовать их вместе с EL 
вместо скриптлетов.

208
Теги JSTJSTL
// Основные теги создания циклов, определения условий, 
// вывода информации на страницу и т. д.
<%@ taglib prefix="c" 
    uri="http://java.sun.com/jsp/jstl/core" %>
// Теги для работы с XML-документами
<%@ taglib prefix="x" 
    uri="http://java.sun.com/jsp/jstl/xml" %>
// Теги для работы с базами данных 
<%@ taglib prefix="s" 
    uri="http://java.sun.com/jsp/jstl/sql" %>
// Теги для форматирования и интернационализации 
// информации (i10n и i18n)
<%@ taglib prefix="f" 
    uri="http://java.sun.com/jsp/jstl/fmt" %>

209
JSP sioreExpression guLaLanguage ((EL)L)
● Расширение JSP, позволяющее удобно работать с 
JavaBeans-компонентами без написания кода на Java.
● Позволяет использовать на страницах 
арифметические и логические выражения.
● Поддерживается «из коробки», можно отключить в 
настройках конкретной страницы и / или приложения.
● Пример использования:
<jsp:text>
   Box Perimeter is: 
   ${2*box.width + 2*box.height}
</jsp:text>

210
меПрПример низоваольиспользования TLJSTL + EL
<%@ taglib prefix="c" 
    uri="http://java.sun.com/jsp/jstl/core" %>
<html>
    <head>
        <title>Пример тега <c:if> библиотеки JSTL</title>
    </head>
    <body>
        <c:set var="salary" scope="session" 
           value="${23400*2}"/>
        <c:if test="${salary > 45000}">
            <p>Salary = <c:out value="${salary}"/><p>
        </c:if>
    </body>
</html>

211
. .2.33.3.2. erareeMFreeMarker 
emplatTemplate EngEnginei

212
acApache FreeMarkerar
● Компилирующий обработчик 
шаблонов.
● Написан на Java.
● Разработчик – Apache Software 
Foundation, первая версия вышла в 
2000 г.
● Свободное ПО, распространяется по 
лицензии BSD.

213
тиннОсобенности и змовозможностижноти
Поддерживает «джентльменский набор» 
возможностей по созданию шаблонов:
● условия;
● циклы;
● присваивание значений переменным;
● арифметические операции;
● операции со строками;
● инструменты форматирования;
● макросы и функции;
● подключение внешних шаблонов;
● экранирование символов.

214
ПримеПример абшаблона
<html>
<head>
    <title>Welcome!</title>
</head>
<body>
    <h1>Welcome ${user}!</h1>
    <p>Our latest product:
    <a href="${latestProduct.url}">
        ${latestProduct.name}
    </a>!
</body>
</html>

215
исинтакСинтаксис абшаблоновно
Шаблон может содержать следующие 
элементы:
● Статический HTML.
● Обращения к модели данных:
Welcome ${user}!
● Директивы:
<#if animals.python.price != 0>
    Pythons are not free today!
</#if>
● Вызовы встроенных функций:
animals?filter(it -> it.protected)

216
Принцип тыабработы reFreeMarkerMark

217
льМодель анданных TLFTL TL(F(FTL a-datdata-model)del)
● Древовидная объектная структура, 
данные из которой шаблон использует 
при формировании HTML.
● Элементы дерева – Java Beans.
● Сложность иерархии может быть 
любой.
● При выводе в HTML все объекты 
преобразуются в строки. 

218
ПримеПример демодели даданныхнны
(root)
  |
  +- user = "Big Joe"
  +- latestProduct
      |
      +- url = "products/greenmouse.html"
      +- name = "green mouse"
// «Корневой» объект. Может быть JavaBean, может быть Map.
Map<String, Object> root = new HashMap<>();
// Кладём строку "user" в «корневой» объект
root.put("user", "Big Joe");
// Создаём объект "latestProduct". Здесь использован Java Bean,
// но Map'ы можно также вкладывать друг в друга.
Product latest = new Product();
latest.setUrl("products/greenmouse.html");
latest.setName("green mouse");
// Кладём "latestProduct" в «корневой» объект.
root.put("latestProduct", latest);

219
аниеьзоИсИспользование в пропроектахтах
1) Скачиваем freemarker.jar.
2) Создаём конфигурацию.
3) Создаём шаблон.
4) Создаём модель данных.
5) Компилируем шаблон с нужными данными:
Writer out = 
 new OutputStreamWriter(System.out);
temp.process(root, out);

220
. .3.33.3.3. Thymeleafymeleaf

221
ymThymeleaf
● Компилирующий обработчик шаблонов.
● Универсальный – может использоваться как 
в веб-приложениях, так и для решения 
общих задач шаблонизации чего-либо.
● Написан на Java.
● Свободное ПО, распространяется по 
лицензии Apache 2.0.
● Интеграция «из коробки» со Spring 
Framework.

222
тиннОсобенности ymeThymeleafaf
● «Выходной» формат – XML, XHTML и HTML5. 
Также поддерживаются JS, CSS и Plain Text.
● Не привязан к Servlet API – может работать 
как «онлайн», так и «оффлайн».
● Построен на модульной системе. Модули 
называются диалектами (dialects).
● Поддержка возможностей i18n и l10n.
● Есть встроенный кеш скомпилированных 
шаблонов.

223
рыПроПроцессоры и диалдиалектыты
● Thymeleaf – модульный движок. Модуль Thymeleaf 
называется диалектом (dialect).
● Диалект состоит из одного или нескольких 
процессоров (processor).
● Процессор – объект, который применяет некоторую 
логику к формируемому на основе шаблона 
артефакту.
● «Из коробки» Thymeleaf содержит стандартный 
диалект (Standard Dialect), которого достаточно для 
решения большинства типовых задач.

224
ртныйтандаСтандартный диалект
● Содержит набор процессоров, предназначенных для 
решения типовых задач.
● Большая часть процессоров стандартного диалекта – 
процессоры атрибутов (Attribute Processors).
● Процессоры атрибутов обрабатывают 
дополнительные («нестандартные») атрибуты тегов:
<input type="text" name="userName" 
       value="James Carrot"
       th:value="${user.name}" />
● Благодаря этому шаблоны Thymeleaf обычно можно 
тестировать в браузере – он просто игнорирует 
нестандартные атрибуты.

225
ыражВыраженияния
● Значения атрибутов присваиваются путём вычисления 
выражений (expressions). 
● Выражения, поддерживаемые стандартным 
диалектом, называются стандартными выражениями.
● В стандартном диалекте Thymeleaf реализована 
поддержка 5 видов выражений:
● ${...} – Variable expressions.
● *{...} – Selection expressions.
● #{...} – Message (i18n) expressions.
● @{...} – Link (URL) expressions.
● ~{...} – Fragment expressions.

226
ПримеПример абшаблона
<table>
  <thead>
    <tr>
      <th th:text="#{msgs.headers.name}">Name</th>
      <th th:text="#{msgs.headers.price}">Price</th>
    </tr>
  </thead>
  <tbody>
    <tr th:each="prod : ${allProducts}">
      <td th:text="${prod.name}">Oranges</td>
      <td th:text="${#numbers.formatDecimal(prod.price,1,2)}">
        0.99
      </td>
    </tr>
  </tbody>
</table>

227
ablariVariable reExpressionssio
● Выражения на языке OGNL (Object Graph Navigation 
Language).
● Позволяют обращаться к переменной из контекста 
Thymeleaf.
● В случае использования совместно со Spring – позволяют 
обращаться к атрибутам модели:
<span th:text="${book.author.name}">
((Book)context.getVariable("book"))
              .getAuthor()
              .getName()
● Могут использоваться с более сложными конструкциями 
(условные выражения, перечисления и т. д.):
<li th:each="book : ${books}">

228
tioSeSelection xprExpressionsssions
Позволяют обратиться к выбранному ранее объекту 
вместо обращения к контексту.
<div th:object="${book}">
  …
  <span th:text="*{title}">...</span>
  …
</div>
{
  final Book selection = 
       (Book) context.getVariable("book");
  output(selection.getTitle());
}

229
ssageMessage i18n((i18n) reExpressionsssio
● Позволяют обращаться к сообщениям из файлов локализации 
(.properties):
#{main.title}
● Помимо обращения по ключу, можно использовать параметры, в т.ч., 
вычисленные с помощью Variable Expressions:
#{message.entrycreated(${entryId})}
● Могут использоваться в любых элементах, предполагающих вывод 
локализованного текста:
<table>
  ...
  <th th:text="#{header.address.city}">...</th>
  <th th:text="#{header.address.country}">...</th>
  ...
</table>
● В сложных случаях могут целиком вычисляться с помощью Variable 
Expressions:
#{${config.adminWelcomeKey}(${session.user.name})}

230
Link L)((URL) xpreExpressionssio
● Позволяют формировать URL внутри контекста приложения:
<a th:href="@{/order/list}">...</a>
<a href="/myapp/order/list;jsessionid=23fa31abd41ea093">
   ...
</a>
● Также могут принимать аргументы:
<a th:href="@{/order/details(id=${orderId},type=$
{orderType})}">...</a>
<a href="/myapp/order/details?id=23&amp;type=online">...</a>
● Могут быть относительными (внутри контекста приложения), привязанными 
к контексту сервера, привязанными к протоколу или абсолютными:
<a th:href="@{../documents/report}">...</a>
<a th:href="@{~/contents/main}">...</a>
<a th:href="@{//static.mycompany.com/res/initial}">...</a>
<a th:href="@{http://www.mycompany.com/main}">...</a>

231
agmFragment reExpressionsss
Позволяют компоновать шаблоны из фрагментов:
<div th:insert="~{commons :: main}">
    ...
</div>
Фрагменты могут использоваться несколько раз, 
передаваться другим шаблонам в качестве аргументов и 
т.д.:
<div th:with="frag=~{footer :: #main/text()}">
  <p th:insert="${frag}">
</div>

232
иеаньзопоИспользование в приложенияхния
Необходимо проинициализировать объекты 
TemplateEngine и TemplateResolver:

233
иеановльспИспользование в енияилоприложениях на азбазе 
Springin
● Есть интеграция «из коробки» – библиотеки 
thymeleaf-spring3 и thymeleaf-spring4.
● Эти библиотеки позволяют использовать Thymeleaf-
шаблоны вместо JSP в приложениях на базе Spring.
● Для интеграции в состав Spring-приложений 
реализован специальный диалект Thymeleaf – 
SpringStandard.

###end
